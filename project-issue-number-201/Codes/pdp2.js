let begWeight = [0, 1.15857, 0.0621459, 0.0530292, -0.143415, -0.0758911, -0.0474041, -0.0349455, -0.0847382, -0.0680448, -0.0148883, -0.100096, -0.115553, -0.0338677, -0.00313602, -0.00582873, -0.0680448, -0.00493041, -0.0101434, -0.0953854, -0.0725983, -0.0794425, -0.0207669, -0.089532, -0.097259, 0.000319899, -0.0677499, -0.00724232, -0.0539544, -0.0655224, -0.0212348, -0.0546325, -0.117938, -0.110146, -0.0959563, -0.0589798, -0.0924644, -0.0987368, -0.0882388, -0.0549733, 1.15857, 0, 0.0621459, 0.0530292, -0.143415, -0.0758911, -0.0474041, -0.0349455, -0.0847382, -0.0680448, -0.0148883, -0.100096, -0.115553, -0.0338677, -0.00313602, -0.00582873, -0.0680448, -0.00493041, -0.0101434, -0.0953854, -0.0725983, -0.0794425, -0.0207669, -0.089532, -0.097259, 0.000319899, -0.0677499, -0.00724232, -0.0539544, -0.0655224, -0.0212348, -0.0546325, -0.117938, -0.110146, -0.0959563, -0.0589798, -0.0924644, -0.0987368, -0.0882388, -0.0549733, 0.0621459, 0.0621459, 0, -0.00244348, 0.773287, 0.03693, -0.0237437, -0.0269837, 0.0263775, 0.851675, -0.0475492, 0.817768, 0.801774, 0.0863917, 0.0774775, 0.0618667, 0.851675, -0.0760124, 0.115689, 0.0134029, 0.0408214, 0.0327132, -0.0982611, 7.20951e-05, 0.0110781, 0.0189214, -0.204501, -0.139163, -0.212009, -0.160918, -0.16045, -0.214304, 0.799321, -0.00537808, 0.079834, 0.120668, 0.0836741, 0.819183, 0.83017, -0.215486, 0.0530292, 0.0530292, -0.00244348, 0, 0.0655566, -0.0301813, 0.0601918, 0.0266889, -0.08703, -0.08654, -0.0330792, 0.827292, -0.110113, -0.0301215, 0.00988309, 0.00829213, -0.08654, 0.0976117, 0.0792813, 0.832245, 0.280799, 0.273384, -0.0472669, -0.0678812, 0.830272, 0.946734, 0.0466766, -0.00741409, 0.0180826, 0.050888, 0.0134909, 0.022203, 0.808719, 0.816797, -0.0157526, -0.041305, -0.0107876, 0.141221, -0.141507, 0.0227882, -0.143415, -0.143415, 0.773287, 0.0655566, 0, -0.759342, -0.788315, -0.801093, -0.750393, -0.156193, 0.0207904, -0.734896, -0.10804, 0.0257908, 0.127958, 0.12698, -0.156193, 0.000174273, 0.135434, 0.0945335, 0.199653, 0.216231, -0.169307, 0.0943046, 0.227137, 0.113398, -0.0583696, -0.113143, -0.0725803, -0.0698545, -0.157288, -0.149197, -0.716938, 0.112942, -0.739069, -0.165423, -0.742591, -0.125061, -0.135694, -0.148849, -0.0758911, -0.0758911, 0.03693, -0.0301813, -0.759342, 0, -0.859164, -0.872954, -0.819447, 0.051421, 0.0238973, -0.0924407, 0.144965, 0.100501, -0.023447, 0.138524, 0.051421, -0.0986949, 0.0918399, 0.120854, 0.134891, 0.116139, -0.00893386, 0.0237563, 0.124588, 0.0342062, -0.837291, -0.274319, -0.241383, -0.839655, -0.257553, -0.220195, -0.0774261, 0.0378984, -0.807809, -0.846639, -0.811421, -0.0901864, 0.0806693, -0.850947, -0.0474041, -0.0474041, -0.0237437, 0.0601918, -0.788315, -0.859164, 0, -0.906371, -0.84957, 0.0136506, 0.0457155, 0.100965, -0.241117, 0.0173965, 0.015986, 0.0108033, 0.0136506, 0.149157, 0.0761151, -0.0290227, -0.0488655, -0.0478072, 0.0355736, 0.0179809, -0.836208, 0.0423675, 0.0218172, -0.0253222, 0.0316565, 0.0184905, -0.00641674, 0.0330878, 0.202477, 0.0339776, -0.0956484, -0.137389, -0.0995454, 0.0998579, -0.0158779, 0.0332307, -0.0349455, -0.0349455, -0.0269837, 0.0266889, -0.801093, -0.872954, -0.906371, 0, -0.863125, 0.00577451, -0.00156295, -0.0147243, -0.0172863, -0.0420913, -0.00425583, -0.0450439, 0.00577451, 0.012884, -0.0925888, -0.158714, -0.184221, -0.176453, 0.026605, -0.0312845, -0.849503, -0.0313877, 0.0784824, 0.0653446, 0.0497377, 0.0527872, 0.07286, 0.0510015, -0.196182, -0.137572, 0.0108318, 0.021742, -0.0273816, -0.0173662, -0.00101269, 0.051641, -0.0847382, -0.0847382, 0.0263775, -0.08703, -0.750393, -0.819447, -0.84957, -0.863125, 0, -0.827651, -0.885725, -0.794444, -0.778649, -0.253644, -0.0273901, -0.151008, -0.827651, -0.286789, -0.891262, -0.79928, -0.822882, -0.815752, -0.0716191, -0.194527, -0.797355, -0.0963573, -0.217243, 0.102267, -0.033923, -0.0207471, 0.0299764, -0.0331539, -0.776221, -0.173286, 0.125049, 0.181212, 0.174277, -0.164489, -0.806642, -0.0327672, -0.0680448, -0.0680448, 0.851675, -0.08654, -0.156193, 0.051421, 0.0136506, 0.00577451, -0.827651, 0, 0.94605, -0.811644, 0.378972, 0.333135, 0.0527829, 0.356984, 1.86517, 0.0133002, 0.0613931, -0.185274, -0.194755, -0.158886, 0.112189, 0.074012, -0.814585, -0.0983671, -0.845649, -0.30465, -0.860582, -0.848038, -0.266866, -0.249193, -0.793266, -0.801268, -0.815938, -0.855103, -0.819572, -0.14641, 1.01292, -0.859467, -0.0148883, -0.0148883, -0.0475492, -0.0330792, 0.0207904, 0.0238973, 0.0457155, -0.00156295, -0.885725, 0.94605, 0, -0.10742, 0.884525, 0.111902, 0.00415841, 0.072267, 0.94605, 0.0563423, 0.0422568, -0.014319, -0.0115001, 0.00100481, 0.122647, 0.121492, -0.00336432, -0.0207807, 0.0353154, -0.0482825, 0.0339594, 0.01128, -0.0268615, 0.0325906, -0.0895193, 0.0140552, -0.872945, -0.917108, -0.876881, -0.101278, 0.917779, 0.0325975, -0.100096, -0.100096, 0.817768, 0.827292, -0.734896, -0.0924407, 0.100965, -0.0147243, -0.794444, -0.811644, -0.10742, 0, -0.763047, -0.0228729, 0.31297, -0.00378618, -0.811644, 0.0427624, 0.065683, -0.783553, -0.806934, -0.799882, -0.251109, -0.039527, -0.781642, 0.308957, -0.811949, -0.876897, -0.826322, -0.814259, -0.861315, -0.825611, 1.02036, 0.0558323, -0.782971, -0.821067, -0.786536, 0.536963, -0.790857, -0.825254, -0.115553, -0.115553, 0.801774, -0.110113, -0.10804, 0.144965, -0.241117, -0.0172863, -0.778649, 0.378972, 0.884525, -0.763047, 0, 0.275816, 0.0362794, 0.874204, 0.378972, -0.0442472, 0.0440286, -0.156876, -0.159613, -0.11704, 0.0756856, 0.0724661, -0.765924, -0.210677, -0.796014, -0.283816, -0.810229, -0.798302, -0.21326, -0.233615, -0.745002, -0.752873, -0.767245, -0.805037, -0.770791, -0.153461, 0.1622, -0.809175, -0.0338677, -0.0338677, 0.0863917, -0.0301215, 0.0257908, 0.100501, 0.0173965, -0.0420913, -0.253644, 0.333135, 0.111902, -0.0228729, 0.275816, 0, 0.0607896, 0.99227, 0.333135, 0.02605, 0.117276, 0.0758836, 0.0550427, 0.0652623, 0.027029, 0.0430348, 0.048452, -0.00148486, -0.272801, -0.320245, -0.289073, -0.275378, -0.312087, -0.288254, 0.000950239, 0.084916, -0.852071, -0.893663, -0.855855, -0.0223805, 0.333467, -0.287843, -0.00313602, -0.00313602, 0.0774775, 0.00988309, 0.127958, -0.023447, 0.015986, -0.00425583, -0.0273901, 0.0527829, 0.00415841, 0.31297, 0.0362794, 0.0607896, 0, 0.0569933, 0.0527829, -0.000181547, 0.0739148, -0.0182304, 0.0276408, 0.0174633, -0.0377616, 0.0234053, -0.0228389, 0.0300908, -0.140351, -0.105349, -0.102547, -0.0854025, -0.0766692, -0.100406, 0.292621, 0.0513741, -0.104719, -0.0463402, 0.0104462, 0.223938, 0.0183519, -0.101008, -0.00582873, -0.00582873, 0.0618667, 0.00829213, 0.12698, 0.138524, 0.0108033, -0.0450439, -0.151008, 0.356984, 0.072267, -0.00378618, 0.874204, 0.99227, 0.0569933, 0, 0.356984, 0.0207224, 0.139154, 0.32174, 0.144246, 0.306778, 0.0143921, 0.0720485, 0.895347, 0.0132821, -0.092873, -0.201861, -0.112635, -0.0960073, -0.166234, -0.110995, 0.0327981, 0.24905, -0.141573, -0.188676, -0.145787, -0.00324978, 0.906296, -0.11114, -0.0680448, -0.0680448, 0.851675, -0.08654, -0.156193, 0.051421, 0.0136506, 0.00577451, -0.827651, 1.86517, 0.94605, -0.811644, 0.378972, 0.333135, 0.0527829, 0.356984, 0, 0.0133002, 0.0613931, -0.185274, -0.194755, -0.158886, 0.112189, 0.074012, -0.814585, -0.0983671, -0.845649, -0.30465, -0.860582, -0.848038, -0.266866, -0.249193, -0.793266, -0.801268, -0.815938, -0.855103, -0.819572, -0.14641, 1.01292, -0.859467, -0.00493041, -0.00493041, -0.0760124, 0.0976117, 0.000174273, -0.0986949, 0.149157, 0.012884, -0.286789, 0.0133002, 0.0563423, 0.0427624, -0.0442472, 0.02605, -0.000181547, 0.0207224, 0.0133002, 0, 0.0458368, -0.0251023, -0.0348587, -0.0231587, 0.0701112, -0.0738901, -0.0664969, 0.0534922, 0.230045, 0.00508488, 0.139118, 0.122887, 0.0328014, 0.145814, 0.12289, 0.0611871, -0.884268, -0.354631, -0.888318, 0.0429479, -0.0319647, 0.145274, -0.0101434, -0.0101434, 0.115689, 0.0792813, 0.135434, 0.0918399, 0.0761151, -0.0925888, -0.891262, 0.0613931, 0.0422568, 0.065683, 0.0440286, 0.117276, 0.0739148, 0.139154, 0.0613931, 0.0458368, 0, 0.18869, 0.215378, 0.230524, -0.0405558, -0.0379087, 0.186355, 0.0950491, -0.911952, -0.174909, -0.127058, -0.111107, -0.144609, -0.12447, 0.245026, 0.152357, -0.0967086, -0.143143, -0.882288, 0.0647956, 0.0260845, -0.125621, -0.0953854, -0.0953854, 0.0134029, 0.832245, 0.0945335, 0.120854, -0.0290227, -0.158714, -0.79928, -0.185274, -0.014319, -0.783553, -0.156876, 0.0758836, -0.0182304, 0.32174, -0.185274, -0.0251023, 0.18869, 0, 0.429433, 0.368206, -0.1191, -0.0350712, 0.2407, 0.146471, -0.816838, -0.306421, -0.83127, -0.819157, -0.290662, -0.254696, -0.765405, 0.183675, -0.787781, -0.825991, -0.791354, -0.78494, -0.795685, -0.830198, -0.0725983, -0.0725983, 0.0408214, 0.280799, 0.199653, 0.134891, -0.0488655, -0.184221, -0.822882, -0.194755, -0.0115001, -0.806934, -0.159613, 0.0550427, 0.0276408, 0.144246, -0.194755, -0.0348587, 0.215378, 0.429433, 0, 0.425495, -0.14424, 0.0197387, 1.00053, 0.173334, -0.840788, -0.333686, -0.855615, -0.843162, -0.892497, -0.244221, -0.788605, 0.144747, -0.811215, -0.274351, -0.814836, -0.808338, -0.243365, -0.854509, -0.0794425, -0.0794425, 0.0327132, 0.273384, 0.216231, 0.116139, -0.0478072, -0.176453, -0.815752, -0.158886, 0.00100481, -0.799882, -0.11704, 0.0652623, 0.0174633, 0.306778, -0.158886, -0.0231587, 0.230524, 0.368206, 0.425495, 0, -0.132296, 0.025893, 0.361819, 0.160454, -0.833534, -0.290405, -0.848221, -0.835889, -0.253417, -0.236817, -0.781616, 0.150539, -0.804144, -0.267004, -0.807747, -0.190479, -0.201361, -0.847127, -0.0207669, -0.0207669, -0.0982611, -0.0472669, -0.169307, -0.00893386, 0.0355736, 0.026605, -0.0716191, 0.112189, 0.122647, -0.251109, 0.0756856, 0.027029, -0.0377616, 0.0143921, 0.112189, 0.0701112, -0.0405558, -0.1191, -0.14424, -0.132296, 0, 0.0733848, -0.864952, -0.0521641, 0.140467, 0.0349741, 0.165051, 0.14574, 0.0611319, 0.171762, -0.231721, -0.204998, -0.866393, -0.909615, -0.870274, -0.170482, 0.142893, 0.171106, -0.089532, -0.089532, 7.20951e-05, -0.0678812, 0.0943046, 0.0237563, 0.0179809, -0.0312845, -0.194527, 0.074012, 0.121492, -0.039527, 0.0724661, 0.0430348, 0.0234053, 0.0720485, 0.074012, -0.0738901, -0.0379087, -0.0350712, 0.0197387, 0.025893, 0.0733848, 0, 0.0253336, -0.0621661, -0.0106191, -0.0573801, -0.0245999, -0.0131708, -0.0412708, -0.0221455, -0.019804, -0.0758013, -0.0505327, -0.0860283, -0.0543051, -0.0350718, 0.102946, -0.0251616, -0.097259, -0.097259, 0.0110781, 0.830272, 0.227137, 0.124588, -0.836208, -0.849503, -0.797355, -0.814585, -0.00336432, -0.781642, -0.765924, 0.048452, -0.0228389, 0.895347, -0.814585, -0.0664969, 0.186355, 0.2407, 1.00053, 0.361819, -0.864952, 0.0253336, 0, 0.888103, -0.814892, -0.880122, -0.829299, -0.817206, -0.864436, -0.828587, -0.763505, 0.128928, -0.785867, -0.82403, -0.789436, -0.783028, -0.793763, -0.828229, 0.000319899, 0.000319899, 0.0189214, 0.946734, 0.113398, 0.0342062, 0.0423675, -0.0313877, -0.0963573, -0.0983671, -0.0207807, 0.308957, -0.210677, -0.00148486, 0.0300908, 0.0132821, -0.0983671, 0.0534922, 0.0950491, 0.146471, 0.173334, 0.160454, -0.0521641, -0.0621661, 0.888103, 0, 0.00254173, -0.0519105, 0.00176808, 0.00763359, -0.0244822, 0.0034861, 0.288793, 0.87337, -0.108717, -0.100264, -0.0876133, 0.184004, -0.323726, 0.00384179, -0.0677499, -0.0677499, -0.204501, 0.0466766, -0.0583696, -0.837291, 0.0218172, 0.0784824, -0.217243, -0.845649, 0.0353154, -0.811949, -0.796014, -0.272801, -0.140351, -0.092873, -0.845649, 0.230045, -0.911952, -0.816838, -0.840788, -0.833534, 0.140467, -0.0106191, -0.814892, 0.00254173, 0, 0.935216, 1.03535, 0.207158, 0.263926, 0.343091, -0.793568, -0.170206, -0.816245, -0.855423, -0.819879, -0.813358, -0.824292, 0.344493, -0.00724232, -0.00724232, -0.139163, -0.00741409, -0.113143, -0.274319, -0.0253222, 0.0653446, 0.102267, -0.30465, -0.0482825, -0.876897, -0.283816, -0.320245, -0.105349, -0.201861, -0.30465, 0.00508488, -0.174909, -0.306421, -0.333686, -0.290405, 0.0349741, -0.0573801, -0.880122, -0.0519105, 0.935216, 0, 0.956261, 0.938421, 0.246728, 0.344508, -0.857108, -0.234381, 0.156856, 0.139976, 0.161259, -0.221295, -0.890557, 0.954594, -0.0539544, -0.0539544, -0.212009, 0.0180826, -0.0725803, -0.241383, 0.0316565, 0.0497377, -0.033923, -0.860582, 0.0339594, -0.826322, -0.810229, -0.289073, -0.102547, -0.112635, -0.860582, 0.139118, -0.127058, -0.83127, -0.855615, -0.848221, 0.165051, -0.0245999, -0.829299, 0.00176808, 1.03535, 0.956261, 0, 1.04532, 0.289184, 0.571072, -0.807763, -0.18451, -0.830669, -0.870606, -0.834351, -0.217002, -0.838827, 1.17218, -0.0655224, -0.0655224, -0.160918, 0.050888, -0.0698545, -0.839655, 0.0184905, 0.0527872, -0.0207471, -0.848038, 0.01128, -0.814259, -0.798302, -0.275378, -0.0854025, -0.0960073, -0.848038, 0.122887, -0.111107, -0.819157, -0.843162, -0.835889, 0.14574, -0.0131708, -0.817206, 0.00763359, 0.207158, 0.938421, 1.04532, 0, 0.267654, 0.352969, -0.795853, -0.172508, -0.818562, -0.857847, -0.822203, -0.81567, -0.826625, 0.354605, -0.0212348, -0.0212348, -0.16045, 0.0134909, -0.157288, -0.257553, -0.00641674, 0.07286, 0.0299764, -0.266866, -0.0268615, -0.861315, -0.21326, -0.312087, -0.0766692, -0.166234, -0.266866, 0.0328014, -0.144609, -0.290662, -0.892497, -0.253417, 0.0611319, -0.0412708, -0.864436, -0.0244822, 0.263926, 0.246728, 0.289184, 0.267654, 0, 0.369868, -0.84204, -0.219112, 0.00996494, 0.058534, 0.0178337, -0.217025, -0.263812, 0.979877, -0.0546325, -0.0546325, -0.214304, 0.022203, -0.149197, -0.220195, 0.0330878, 0.0510015, -0.0331539, -0.249193, 0.0325906, -0.825611, -0.233615, -0.288254, -0.100406, -0.110995, -0.249193, 0.145814, -0.12447, -0.254696, -0.244221, -0.236817, 0.171762, -0.0221455, -0.828587, 0.0034861, 0.343091, 0.344508, 0.571072, 0.352969, 0.369868, 0, -0.807062, -0.183804, -0.829956, -0.869849, -0.833635, -0.21629, -0.838107, 1.22728, -0.117938, -0.117938, 0.799321, 0.808719, -0.716938, -0.0774261, 0.202477, -0.196182, -0.776221, -0.793266, -0.0895193, 1.02036, -0.745002, 0.000950239, 0.292621, 0.0327981, -0.793266, 0.12289, 0.245026, -0.765405, -0.788605, -0.781616, -0.231721, -0.019804, -0.763505, 0.288793, -0.793568, -0.857108, -0.807763, -0.795853, -0.84204, -0.807062, 0, 0.079392, -0.764826, -0.802579, -0.768369, 0.404363, -0.772661, -0.80671, -0.110146, -0.110146, -0.00537808, 0.816797, 0.112942, 0.0378984, 0.0339776, -0.137572, -0.173286, -0.801268, 0.0140552, 0.0558323, -0.752873, 0.084916, 0.0513741, 0.24905, -0.801268, 0.0611871, 0.152357, 0.183675, 0.144747, 0.150539, -0.204998, -0.0758013, 0.128928, 0.87337, -0.170206, -0.234381, -0.18451, -0.172508, -0.219112, -0.183804, 0.079392, 0, -0.772736, -0.810623, -0.776288, 0.0520758, -0.780592, -0.183449, -0.0959563, -0.0959563, 0.079834, -0.0157526, -0.739069, -0.807809, -0.0956484, 0.0108318, 0.125049, -0.815938, -0.872945, -0.782971, -0.767245, -0.852071, -0.104719, -0.141573, -0.815938, -0.884268, -0.0967086, -0.787781, -0.811215, -0.804144, -0.866393, -0.0505327, -0.785867, -0.108717, -0.816245, 0.156856, -0.830669, -0.818562, 0.00996494, -0.829956, -0.764826, -0.772736, 0, 0.973486, 0.159514, -0.784357, -0.795099, -0.829597, -0.0589798, -0.0589798, 0.120668, -0.041305, -0.165423, -0.846639, -0.137389, 0.021742, 0.181212, -0.855103, -0.917108, -0.821067, -0.805037, -0.893663, -0.0463402, -0.188676, -0.855103, -0.354631, -0.143143, -0.825991, -0.274351, -0.267004, -0.909615, -0.0860283, -0.82403, -0.100264, -0.855423, 0.139976, -0.870606, -0.857847, 0.058534, -0.869849, -0.802579, -0.810623, 0.973486, 0, 0.980395, -0.191234, -0.833507, -0.869469, -0.0924644, -0.0924644, 0.0836741, -0.0107876, -0.742591, -0.811421, -0.0995454, -0.0273816, 0.174277, -0.819572, -0.876881, -0.786536, -0.770791, -0.855855, 0.0104462, -0.145787, -0.819572, -0.888318, -0.882288, -0.791354, -0.814836, -0.807747, -0.870274, -0.0543051, -0.789436, -0.0876133, -0.819879, 0.161259, -0.834351, -0.822203, 0.0178337, -0.833635, -0.768369, -0.776288, 0.159514, 0.980395, 0, -0.787925, -0.798684, -0.833275, -0.0987368, -0.0987368, 0.819183, 0.141221, -0.125061, -0.0901864, 0.0998579, -0.0173662, -0.164489, -0.14641, -0.101278, 0.536963, -0.153461, -0.0223805, 0.223938, -0.00324978, -0.14641, 0.0429479, 0.0647956, -0.78494, -0.808338, -0.190479, -0.170482, -0.0350718, -0.783028, 0.184004, -0.813358, -0.221295, -0.217002, -0.81567, -0.217025, -0.21629, 0.404363, 0.0520758, -0.784357, -0.191234, -0.787925, 0, -0.125429, -0.826678, -0.0882388, -0.0882388, 0.83017, -0.141507, -0.135694, 0.0806693, -0.0158779, -0.00101269, -0.806642, 1.01292, 0.917779, -0.790857, 0.1622, 0.333467, 0.0183519, 0.906296, 1.01292, -0.0319647, 0.0260845, -0.795685, -0.243365, -0.201361, 0.142893, 0.102946, -0.793763, -0.323726, -0.824292, -0.890557, -0.838827, -0.826625, -0.263812, -0.838107, -0.772661, -0.780592, -0.795099, -0.833507, -0.798684, -0.125429, 0, -0.837746, -0.0549733, -0.0549733, -0.215486, 0.0227882, -0.148849, -0.850947, 0.0332307, 0.051641, -0.0327672, -0.859467, 0.0325975, -0.825254, -0.809175, -0.287843, -0.101008, -0.11114, -0.859467, 0.145274, -0.125621, -0.830198, -0.854509, -0.847127, 0.171106, -0.0251616, -0.828229, 0.00384179, 0.344493, 0.954594, 1.17218, 0.354605, 0.979877, 1.22728, -0.80671, -0.183449, -0.829597, -0.869469, -0.833275, -0.826678, -0.837746, 0];
let stage = 1;
let names = [
    "ceiling",
    "walls",
    "door",
    "window",
    "very-large",
    "large",
    "medium",
    "small",
    "very-small",
    "desk",
    "telephone",
    "bed",
    "typewriter",
    "book-shelf",
    "carpet",
    "books",
    "desk-chair",
    "clock",
    "picture",
    "floor-lamp",
    "sofa",
    "easy-chair",
    "coffee-cup",
    "ash-tray",
    "fire-place",
    "drapes",
    "stove",
    "sink",
    "refrigerator",
    "toaster",
    "cupboard",
    "coffeepot",
    "dresser",
    "television",
    "bathtub",
    "toilet",
    "scale",
    "coat-hanger",
    "computer",
    "oven"];
let roomtype = ["KITCHEN", "BEDROOM", "OFFICE"];
let setNewHinton= false;
let weights = [];
let tempArrH = [];
let markDescriptors = [];
let iterationActivation = [];
let setTestNetwork = false;
let roomChoice = -1;
let markBedroom = [];
let markOffice = [];
let markKitchen = [];
let weightsCopy=[];
function preload() {
    //names=loadStrings('roomunames.txt');
    //console.log(names[3]);
    //weights=loadStrings('csroomwt.txt');
}
function setup() {
    var forPosn = createCanvas(800, 600);
    forPosn.parent("flex-container");
    smooth();
    noStroke();
    background(100);
    getWeights();
    setDescriptors();
    setRooms();
}

function setRooms() {
    for (let i = 0; i < 40; i++) {
        markBedroom[i] = false;
        markKitchen[i] = false;
        markOffice[i] = false;
    }
}
function draw() {
    if (stage == 1) {
        background(100);
        drawStageOne();
    }
    else if (stage == 2) {
        background(100);
        drawStageTwoMain();
    }
    else if (stage == 3) {
        background(100);
        drawStageThree();
    }
    else if (stage == 21) {
        background(100);
        drawStageTwoOne();
    }
    else if (stage == 22) {
        background(100);
        drawStageTwoTwo();
    }
    else if(stage == 221) {
        background(100);
        drawStageTwoTwoOne();
    }
}

function setDescriptors() {
    for (let i = 0; i < 40; i++) {
        markDescriptors[i] = false;
    }
}

function drawStageOne() {
    smooth();
    noStroke();
    fill(153, 153, 136, 255);
    rect(0, 0, 800, 20);
    noSmooth();
    fill(255, 255, 255, 255);
    text("Constraint Satisfaction Neural Network Models", 10, 13);
    textSize(13);
    fill(200, 250, 0);
    noSmooth();
    text("FOLLOWING IS A LIST OF DESCRIPTORS USED TO TRAIN THE MODEL", 160, 170);
    text("AND DESCRIBE ABOVE ROOM TYPES", 260, 190);
    //this part deals with the display of descriptors
    fill(255);
    rect(50, 225, 700, 220);
    for (let j = 0; j < 5; j += 1) {
        for (let i = 0; i < 8; i += 1) {
            textSize(16);
            fill(0);
            text(names[j * 8 + i], 80 + 140 * (j), 250 + (i * 24));
        }
    }

    fill(255);
    rect(265, 510, 260, 50);
    fill(0);
    rect(270, 515, 250, 40);
    fill(200, 200, 0);
    textSize(13);
    text("Click here for clamping descriptors", 285, 540);


    textSize(13);
    fill(255, 200, 20);
    text("CLICK HERE TO SEE THE HINTON DIAGRAMS", 250, 50);
    fill(200, 160, 0);
    rect(340, 60, 100, 30);
    stroke(0);
    rect(345, 65, 90, 20);
    textSize(13);
    fill(0);
    text("CLICK", 370, 80);
    noStroke();
    textSize(13);
    fill(250, 200, 0);
    text("THE ROOM TYPES THE MODEL GETS TRAINED FOR ARE " + roomtype[0] + ", " + roomtype[1] + " and " + roomtype[2] + " ", 120, 140);
}

function getWeights() {
    let k = 0;
    for (let i = 0; i < 40; i++) {
        weights[i] = [];
        weightsCopy[i]= [];
        for (let j = 0; j < 40; j++) {
            weights[i][j] = begWeight[k];
            weightsCopy[i][j]= begWeight[k];
            k++;
        }
    }
    //console.log(k);
}

function drawStageTwoMain() {
    smooth();
    noStroke();
    fill(153, 153, 136, 255);
    rect(0, 0, 800, 20);
    noSmooth();
    fill(255, 255, 255, 255);
    textSize(13);
    text("Constraint Satisfaction Neural Network Models", 10, 13);
    fill(200, 160, 0);
    stroke(2);
    rect(110, 230, 590, 30);
    textSize(15);
    fill(0);
    text("CLICK HERE TO SEE THE ORIGINAL HINTON DIAGRAM WITH PRESET WEIGHTS", 120, 250);
    fill(200, 160, 0);
    stroke(2);
    rect(220, 330, 345, 30);
    textSize(15);
    fill(0);
    text("CLICK HERE TO FURTHER TRAIN THE MODEL", 230, 350);
    fill(200, 160, 0);
    stroke(2);
    rect(360, 430, 70, 30);
    textSize(15);
    fill(0);
    text("HOME", 370, 450);
}

function drawStageTwoTwo() {
    smooth();
    noStroke();
    fill(153, 153, 136, 255);
    rect(0, 0, 800, 20);
    noSmooth();
    fill(255, 255, 255, 255);
    textSize(13);
    text("Constraint Satisfaction Neural Network Models", 10, 13);
    for (let i = 0; i < 3; i++) {
        stroke(1);
        if (roomChoice == i) {
            fill(255, 0, 0);
        }
        else {
            fill(255, 255, 0);
        }
        rect(160 + 180 * i, 30, 100, 30);
        fill(0);
        textSize(13);
        if (i == 1) {
            text(roomtype[i], 170 + 185 * i, 50);
        }
        else {
            text(roomtype[i], 180 + 185 * i, 50);
        }
    }
    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 8; j++) {

            if (roomChoice == 0) {
                if (markKitchen[i * 8 + j] == false) { fill(178, 255, 102); }
                else { fill(255, 0, 0); }
            }
            else if (roomChoice == 1) {
                if (markBedroom[i * 8 + j] == false) { fill(178, 255, 102); }
                else { fill(255, 0, 0); }
            }
            else if (roomChoice == 2) {
                if (markOffice[i * 8 + j] == false) { fill(178, 255, 102); }
                else { fill(255, 0, 0); }
            }
            else {
                fill(178, 255, 102);
            }
            rect(20 + j * 95, 80 + 20 * i, 95, 20);
            fill(0);
            textSize(13);
            text(names[i * 8 + j], 25 + j * 95, 95 + 20 * i);
        }
    }
    if (roomChoice != -1) {
        fill(255);
        textSize(15);
        text("The descriptors chosen for the " + roomtype[roomChoice] + " are:", 20, 200);
        let k = 0;
        let h = 0;
        for (let i = 0; i < 5; i++) {
            for (let j = 0; j < 8; j++) {
                if (roomChoice == 0) {
                    if (markKitchen[i * 8 + j] == true) {
                        fill(255);
                        textSize(15);
                        text(names[i * 8 + j], 20 + 120 * h, 220 + k * 20);
                        k++;
                        if (k > 12) {
                            h++;
                            k = 0;
                        }

                    }
                }
                else if (roomChoice == 1) {
                    if (markBedroom[i * 8 + j] == true) {
                        fill(255);
                        textSize(15);
                        text(names[i * 8 + j], 20 + 120 * h, 220 + k * 20);
                        k++;
                        if (k > 12) {
                            h++;
                            k = 0;
                        }

                    }
                }
                if (roomChoice == 2) {
                    if (markOffice[i * 8 + j] == true) {
                        fill(255);
                        textSize(15);
                        text(names[i * 8 + j], 20 + 120 * h, 220 + k * 20);
                        k++;
                        if (k > 12) {
                            h++;
                            k = 0;
                        }

                    }
                }
            }
        }
    }
    fill(255, 255, 0);
    rect(40, 500, 310, 30);
    fill(0);
    textSize(15);
    text("Train model and show Hinton Diagram", 50, 520);
    fill(255, 255, 0);
    rect(400, 500, 60, 30);
    fill(0);
    textSize(15);
    text("BACK", 410, 520);
    fill(255, 255, 0);
    rect(510, 500, 70, 30);
    fill(0);
    textSize(15);
    text("RESET", 520, 520);
}

function getRoomChoice() {   //160+180*i, 30, 100, 30
    for (let i = 0; i < 3; i++) {
        if (mouseX > 160 + 180 * i && mouseX < 260 + 180 * i && mouseY > 30 && mouseY < 60) {
            if (roomChoice == i) {
                roomChoice = -1;
            }
            else {
                roomChoice = i;
            }

        }
    }
}

function validateTrainNetwork() {
    let flag=[0,0,0];
    //let run =true;
    for(let i=0;i<40;i++)
    {
        if(markKitchen[i]==true)
        {flag[0]++;}
        if(markBedroom[i]==true)
        {flag[1]++;}
        if(markOffice[i]==true)
        {flag[2]++;}
    }
    for(let i=0;i<3;i++)
    {
        if(flag[i]==0)
        {
      //      run=false;
            return false;
        }
    }
    return true;
    //if(run==true)
    //{
    //    trainNewHinton();
    //}
}

function drawStageTwoTwoOne()
{
    setNewHinton=true;
    drawStageTwoOne();
}
function setRoomDescriptor() {//20 + j * 95, 80 + 20 * i, 95, 20
    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 8; j++) {
            if (mouseX > 20 + j * 95 && mouseX < 20 + (j + 1) * 95 && mouseY > 80 + 20 * i && mouseY < 80 + 20 * (i + 1)) {
                if (roomChoice == 0) {
                    if (markKitchen[i * 8 + j] == false) { markKitchen[i * 8 + j] = true; }
                    else { markKitchen[i * 8 + j] = false; }

                }
                else if (roomChoice == 1) {
                    if (markBedroom[i * 8 + j] == false) { markBedroom[i * 8 + j] = true; }
                    else { markBedroom[i * 8 + j] = false; }
                }
                else if (roomChoice == 2) {
                    if (markOffice[i * 8 + j] == false) { markOffice[i * 8 + j] = true; }
                    else { markOffice[i * 8 + j] = false; }
                }
            }
        }
    }
}
function drawStageTwoOne() {
    smooth();
    noStroke();
    fill(153, 153, 136, 255);
    rect(0, 0, 800, 20);
    noSmooth();
    fill(255, 255, 255, 255);
    textSize(13);
    text("Constraint Satisfaction Neural Network Models", 10, 13);

    //making big box
    let drawX = 10;
    let drawY = 115;
    fill(160);
    rect(drawX, drawY, 780, 365);
    stroke(0);
    rect(drawX + 5, drawY + 5, 770, 355);
    noStroke();
    //making descriptor boxes
    drawX = drawX + 10;
    drawY = drawY + 10;
    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 8; j++) {
            fill(255);
            rect(drawX + 95 * j, drawY + 70 * i, 85, 50);
            fill(0);
            textSize(13);
            text(names[8 * i + j], drawX + 95 * j, drawY + 70 * i + 65);
        }
    }
    //textSize(16);
    noSmooth();
    fill(255);
    rect(610, 520, 80, 30);
    fill(0);
    rect(612, 522, 76, 26);
    textSize(17);
    fill(255);
    text("BACK", 625, 542);
    textSize(18);
    fill(255, 200, 20);
    text("Hover mouse over unit to see enlarged version of it's Hinton diagram", 100, 80);
    makeHinton();
    
}

function makeNewHinton()
{
    
    for(let i=0;i<40;i++)
    {
        for(let j=0;j<40;j++)
        {
            if(i!=j)
            {
                if(markKitchen[i]==true)
                {
                    if(markKitchen[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] + (Math.abs(weights[i][j]));
                    }
                    if(markBedroom[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] - (Math.abs(weights[i][j])/2);
                    }
                    if(markOffice[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] - (Math.abs(weights[i][j])/2);
                    }
                }
                if(markBedroom[i]==true)
                {
                    if(markKitchen[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] - (Math.abs(weights[i][j])/2);
                    }
                    if(markBedroom[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] + (Math.abs(weights[i][j]));
                    }
                    if(markOffice[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] - (Math.abs(weights[i][j])/2);
                    }
                }
                if(markOffice[i]==true)
                {
                    if(markKitchen[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] - (Math.abs(weights[i][j])/2);
                    }
                    if(markBedroom[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] - (Math.abs(weights[i][j])/2);
                    }
                    if(markOffice[j]==true)
                    {
                        weightsCopy[i][j]=weightsCopy[i][j] + (Math.abs(weights[i][j]));
                    }
                }
            }
        }
    }
    //makeHinton();
}



function makeHinton()
{
    let drawX=20,drawY=125;
    let k = 0, min = 0.0, max = 0.0;
    for (let i = 0; i < 40; i++) {
        for (let j = 0; j < 40; j++) {
            if(setNewHinton)
            {
                tempArrH[k]= weightsCopy[i][j];
            }
            else
            {
                tempArrH[k] = weights[i][j];
            }
            if (tempArrH[k] > max) {
                max = tempArrH[k];
            }
            else if (tempArrH[k] < min) {
                min = tempArrH[k];
            }
            //console.log(tempArrH[k]);
            k++;
        }
    }
    //console.log(tempArrH[1]);
    //  console.log(max+","+min);
    if (Math.abs(min) > max) {
        max = Math.abs(min);
    }

    for (let i = 0; i < 1600; i++) {
        tempArrH[i] = tempArrH[i] / max;
    }

    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 8; j++) {
            let t = (8 * i) + j;
            //fill(0);
            for (let in1 = 0; in1 < 5; in1++) {
                for (let ou1 = 0; ou1 < 8; ou1++) {
                    let dd = (8 * in1) + ou1;
                    let tt = int((tempArrH[(40 * t) + dd] * 100));
                    //console.log(tt);
                    //if(i==0&&j==0&&inp==0&&out==0)
                    //{console.log(tempArrH[1]);}
                    let tempX = drawX + 95 * j + 4;
                    let tempY = drawY + 70 * i + 5;
                    fill(120 - tt);
                    rect(tempX + 10 * ou1, tempY + 9 * in1, 2 + 7 * tempArrH[40 * t + dd], 2 + 6 * tempArrH[40 * t + dd]);
                    //console.log("what hap");

                }
            }
        }
    }
    checkForHover();
}
    


function checkForHover() {
    let drawX = 20;
    let drawY = 125;
    // fill(40);
    // rect(0, 490, 600, 100);
    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 8; j++) {
            let t = (8 * i) + j;
            if (mouseX > drawX + 95 * j && mouseX < drawX + 95 * j + 85 && mouseY > drawY + 70 * i && mouseY < drawY + 70 * i + 50) {
                fill(120);
                rect(260, 490, 260, 100);
                fill(255);
                rect(265, 495, 250, 90);
                fill(255);
                textSize(18);
                text(names[(8 * i) + j], 120, 550);
                let t2 = (8 * i) + j;
                fill(0);
                for (let ou1 = 0; ou1 < 5; ou1++) {
                    stroke(30);
                    //          line(275, 495+18*out, 515, 495+18*out);
                    noStroke();
                    for (let in1 = 0; in1 < 8; in1++) {
                        stroke(30);
                        //            line(275+in*30, 495, 275+in*30, 585);
                        noStroke();
                        let cc = (8 * ou1) + in1;
                        let tt = int((tempArrH[(40 * t) + cc] * 100));
                        fill(120 - tt);

                        //            2+7*tempARRh[40*t+(8*in)+out], 2+6*tempARRh[40*t+(8*in)+out]
                        rect(275 + in1 * 30 + 2, 495 + 18 * ou1 + 2, 3 + 10 * tempArrH[40 * t2 + cc], 3 + 10 * tempArrH[40 * t2 + cc]);
                    }
                }
                noStroke();
                break;
            }
        }
    }
}

function drawStageThree() {
    smooth();
    noStroke();
    fill(153, 153, 136, 255);
    rect(0, 0, 800, 20);
    noSmooth();
    fill(255, 255, 255, 255);
    textSize(13);
    text("Constraint Satisfaction Neural Network Models", 10, 13);
    fill(255);
    rect(610, 560, 80, 30);
    stroke(0);
    rect(612, 562, 76, 26);
    textSize(13);
    fill(0);
    text("HOME", 630, 580);
    // click here to start testing the nw after clamping the descriptors
    fill(255);
    rect(150, 560, 140, 30);
    stroke(0);
    rect(152, 562, 136, 26);
    //fill(0);
    textSize(13);
    fill(0);
    text("TEST NETWORK", 167, 580);
    fill(255);
    rect(407, 560, 63, 30);
    stroke(0);
    rect(409, 562, 59, 26);
    //fill(0);
    textSize(13);
    fill(0);
    text("RESET", 417, 580);
    textSize(15);
    fill(255, 200, 20);
    text("Click on descriptor to clamp it and click again to unclamp", 190, 40);
    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 8; j++) {
            if (markDescriptors[i * 8 + j] == false) {
                fill(178, 255, 102);
            }
            else {
                fill(255, 0, 0);
            }
            rect(20 + j * 95, 50 + 20 * i, 95, 20);
            fill(0);
            textSize(13);
            text(names[i * 8 + j], 25 + j * 95, 65 + 20 * i);
        }
    }
    if (setTestNetwork == true) {
        testNetwork();
    }
}

function clampDescriptor() {
    let flag = 0,count=0;
    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 8; j++) {
            if (mouseX > 20 + j * 95 && mouseX < 20 + (j + 1) * 95 && mouseY < 50 + 20 * (i + 1) && mouseY > 50 + 20 * i) {
                if (markDescriptors[i * 8 + j] == false) {
                    markDescriptors[i * 8 + j] = true;
                }
                else {
                    for(let k=0;k<40;k++)
                    {
                        if(markDescriptors[k]==true)
                        {
                            count++;
                        }
                    }
                    if(count==1)
                    {
                        setTestNetwork = false;        
                    }
                    count=0;
                    markDescriptors[i * 8 + j] = false;
                }

                flag = 1;
                break;
            }
        }
        if (flag == 1) { break; }
    }

}

function testNetwork() {
    let clampInput = [];
    let activation = [];
    let nextState = [];
    let nextStateBool = [];
    //console.log("beginning test");
    let iterNum = 1;
    let threshold = 0;
    for (let i = 0; i < 40; i++) {
        if (markDescriptors[i] == true) {
            clampInput[i] = 1;
            activation[i] = 1;
        }
        else {
            clampInput[i] = 0;
            activation[i] = 0;
        }
        nextState[i] = 0.0;
        nextStateBool[i] = false;
    }

    for (let i = 0; i < 40; i++) {
        iterationActivation[i] = [];
        iterationActivation[0][i] = activation[i];
    }
    //console.log("beginning do");
    do {
        for (let i = 0; i < 40; i++) {
            for (let j = 0; j < 40; j++) {

                nextState[i] = nextState[i] + activation[j] * weights[i][j];
            }
            if (nextState[i] > threshold) {
                nextStateBool[i] = true;
            }
            else {
                nextStateBool[i] = false;
            }
        }

        for (let i = 0; i < 40; i++) {
            if (nextStateBool[i]) {
                activation[i] = 1;
            }
        }

        for (let i = 0; i < 40; i++) {
            iterationActivation[iterNum][i] = activation[i];
            nextState[i] = 0.0;
            nextStateBool[i] = false;
        }
        iterNum++;
    } while (iterNum < 16)
    //console.log("completed do");
    displayTestedNetwork();
}

function displayTestedNetwork() {
    stroke(200, 200, 0);
    fill(100);
    rect(10, 155, 400, 400);
    rect(415, 155, 380, 400);
    noStroke();
    let x = 20;
    let y = 170;
    //console.log("leseeee");
    for (let i = 0; i < 20; i++) {
        fill(255);
        textSize(13);
        text(names[i], x, y + 20 * i);
        text(names[20 + i], x + 400, y + 20 * i);
    }
    for (let i = 0; i < 20; i++) {
        for (let j = 0; j < 14; j++) {
            stroke(0);
            let fill1 = int(iterationActivation[j][i] * 120);
            let fill2 = int(iterationActivation[j][20 + i] * 120);
            if (iterationActivation[0][i] != 1) {
                if (iterationActivation[j][i] == 1 && j < 6) {
                    fill(fill1);
                    rect(x + 100 + 20 * j, (y - 10) + 20 * i, 4 + iterationActivation[j][i] * j, 4 + iterationActivation[j][i] * j);
                    fill(fill2);
                    rect(x + 500 + 20 * j, (y - 10) + 20 * i, 4 + iterationActivation[j][20 + i] * j, 4 + iterationActivation[j][20 + i] * j);
                }
                else {
                    fill(fill1);
                    rect(x + 100 + 20 * j, (y - 10) + 20 * i, iterationActivation[j][i] * 10, iterationActivation[j][i] * 10);
                    fill(fill2);
                    rect(x + 500 + 20 * j, (y - 10) + 20 * i, iterationActivation[j][20 + i] * 10, iterationActivation[j][20 + i] * 10);
                }
            }
            else {
                fill(fill1);
                rect(x + 100 + 20 * j, (y - 10) + 20 * i, iterationActivation[j][i] * 10, iterationActivation[j][i] * 10);
                fill(fill2);
                rect(x + 500 + 20 * j, (y - 10) + 20 * i, iterationActivation[j][20 + i] * 10, iterationActivation[j][20 + i] * 10);
            }

            noFill();
            noStroke();
        }
    }
}

function validateClampNetwork()
{
    for(let i=0;i<40;i++)
    {
        if(markDescriptors[i]==true)
        {
            return true;
        }
    }
    return false;
}
function mouseReleased() {
    if (stage == 1) {
        if (mouseY > 60 && mouseY < 90 && mouseX > 340 && mouseX < 440) {
            stage = 2;
        }
        else if (mouseY > 515 && mouseY < 555 && mouseX > 270 && mouseX < 520) {
            stage = 3;
        }
    }//612, 522, 76, 26
    else if (stage == 2) {//110, 230, 590, 30
        if (mouseX > 110 && mouseX < 700 && mouseY > 230 && mouseY < 260) {
            stage = 21;
        }//220, 330, 345, 30
        else if (mouseX > 220 && mouseX < 220 + 345 && mouseY > 330 && mouseY < 360) {
            stage = 22;
        }//360, 430, 70, 30
        else if (mouseX > 360 && mouseX < 430 && mouseY > 430 && mouseY < 460) {
            stage = 1;
        }
    }
    else if (stage == 21) {
        if (mouseY > 522 && mouseY < 548 && mouseX > 612 && mouseX < 688) {
            stage = 2;
        }
    }
    else if (stage == 22) {//160+180*i, 30, 100, 30
        if (mouseX > 160 && mouseX < 620 && mouseY > 30 && mouseY < 60) {
            getRoomChoice();
        }
        else if (mouseX > 20 && mouseX < 780 && mouseY > 80 && mouseY < 180) {
            if (roomChoice == -1) { alert("select a room first by clicking on one of the rooms"); }
            else { setRoomDescriptor(); }
        }//40,500,310,30
        else if (mouseX > 40 && mouseX < 350 && mouseY > 500 && mouseY < 530) {
            if(validateTrainNetwork())
            {
                makeNewHinton();
                stage=221;
            }
            else
            {
                alert("please select descriptors for all three room types");
            }
        }//400,500,60,30
        else if (mouseX > 400 && mouseX < 460 && mouseY > 500 && mouseY < 530) {
            stage = 2;
        }//510, 500, 70, 30
        else if(mouseX>510&&mouseX<580&&mouseY>500&&mouseY<530)
        {
            roomChoice=-1;
            setRooms();
            getWeights();
        }
    }
    else if( stage == 221 )
    {
        if (mouseY > 522 && mouseY < 548 && mouseX > 612 && mouseX < 688) {
            stage = 22;
        }
    }
    else if (stage == 3) {
        if (mouseX > 20 && mouseX < 780 && mouseY > 50 && mouseY < 150) {
            clampDescriptor();
        }//610, 560, 80, 30
        else if (mouseX > 610 && mouseX < 690 && mouseY > 560 && mouseY < 590) {
            stage = 1;
        }//150, 560, 140, 30
        else if (mouseX > 150 && mouseX < 290 && mouseY > 560 && mouseY < 590) {
            //console.log("clicking button");
            if(validateClampNetwork())
            {
                setTestNetwork = true;
            }
            else
            {
                alert("select a descriptor to clamp");
            }
            
        }//407, 560, 63, 30
        else if(mouseX>407 && mouseX<470 && mouseY>560 && mouseY<590)
        {
            setTestNetwork=false;
            setDescriptors();
        }
    }
}










